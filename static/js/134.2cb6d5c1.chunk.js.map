{"version":3,"file":"static/js/134.2cb6d5c1.chunk.js","mappings":"8JACaA,EAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAV,EACjBC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,KAAKC,SAAf,EACpBC,EAAW,SAAAL,GAAK,OAAIA,EAAMG,KAAKG,KAAf,EAEhBC,EAAiB,SAAC,GAAiC,IAAvBC,EAAsB,EAA9BL,KAAQK,MAASP,EAAa,EAAbA,OAChD,OAAKA,EAGEO,EAAMP,QAAO,SAAAE,GAAI,OACtBA,EAAKM,KAAKC,cAAcC,SAASV,EAAOS,cADlB,IAFfF,CAKV,E,SCiCD,EAtCiB,WAEb,IAAML,GAAOS,EAAAA,EAAAA,IAAYL,GAE3B,OACE,8BACA,eAAIM,UAAU,kBAAd,SACCV,EAAKW,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,GAAIC,EAA3C,EAA2CA,QAASC,EAApD,EAAoDA,YAC7DC,EADS,EACTA,WAAYC,EADH,EACGA,gBADH,OAER,gBAAaX,UAAU,OAAvB,WACE,gBAAKA,UAAU,QAAf,UACA,gBAAKA,UAAU,YAAYY,IAAKV,EAAKW,IAAI,WAEzC,eAAGb,UAAU,WAAb,UACGG,EAAMC,EAAMC,EAAMC,MAErB,eAAGN,UAAU,cAAb,UACCQ,EAASC,EAAaC,EAAYC,MAEnC,mBAAQX,UAAU,MAAMI,KAAK,SAA7B,SAAsC,iBAV/BG,EAFD,OAoBb,E,2BCsFD,MAxGA,WACI,IAAMhB,GAAYQ,EAAAA,EAAAA,IAAYV,GAC1BI,GAAQM,EAAAA,EAAAA,IAAYP,GACpBJ,GAASW,EAAAA,EAAAA,IAAYb,GACnB4B,GAAWC,EAAAA,EAAAA,MA+BjB,OA7BAC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,MACV,GAAE,CAACH,KA4BA,iBAAKd,UAAU,YAAf,WACE,kBACAA,UAAU,mBADV,WAKE,gBAAKA,UAAU,iBAAf,UAEE,mBAAOA,UAAU,WAAjB,UAA4B,aAE1B,kBACEI,KAAK,OACLc,MAAO9B,EAGT+B,SAAU,SAAAC,GAAC,OAAIN,GAASO,EAAAA,EAAAA,GAAgBD,EAAEE,cAAcJ,OAA7C,EACTK,YAAY,iBACZvB,UAAU,oBAIhB,gBAAKA,UAAU,iBAAf,UACE,mBAAOA,UAAU,WAAjB,UAA4B,iBAE1B,kBACAI,KAAK,OACLc,MAAO9B,EACP+B,SAAU,SAAAC,GAAC,OAAIN,GAASO,EAAAA,EAAAA,GAAgBD,EAAEE,cAAcJ,OAA7C,EAGXK,YAAY,OACZvB,UAAU,oBAGd,gBAAKA,UAAU,oBAAf,UACE,mBAAOA,UAAU,WAAjB,UAA4B,yBAE1B,iBAAKA,UAAU,aAAf,WACE,kBACAI,KAAK,OACLmB,YAAY,OACZL,MAAO9B,EACP+B,SAAU,SAAAC,GAAC,OAAIN,GAASO,EAAAA,EAAAA,GAAgBD,EAAEE,cAAcJ,OAA7C,EAGXlB,UAAU,iBACV,kBAEFkB,MAAO9B,EACP+B,SAAU,SAAAC,GAAC,OAAIN,GAASO,EAAAA,EAAAA,GAAgBD,EAAEE,cAAcJ,OAA7C,EAETd,KAAK,OACLmB,YAAY,KACZvB,UAAU,wBAIhB,mBAAQI,KAAK,SAASJ,UAAU,MAAhC,SAAsC,eAItC,SAAC,EAAD,IACCT,IAAa,yBAAK,eAClBE,IAAS,yBAAMA,MAG3B,C","sources":["Redux/selectors.js","components/CarsList/CarsList.jsx","components/Catalog/Catalog.jsx"],"sourcesContent":["export const getCars = state => state.cars.items;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.cars.isLoading;\nexport const getError = state => state.cars.error;\n\nexport const getVisibleCars = ({ cars: { items }, filter }) => {\n  if (!filter) {\n    return items;\n  }\n  return items.filter(cars =>\n    cars.name.toLowerCase().includes(filter.toLowerCase())\n  );\n};","// import { Link, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { getVisibleCars } from '../../Redux/selectors';\n// import PropTypes from 'prop-types';\n// import {Ul} from './MovieList.styled'\nimport './styles.css';\n\nconst CarsList = () => {\n    // const dispatch = useDispatch();\n    const cars = useSelector(getVisibleCars);\n\n  return (\n    <section>\n    <ul className='container_carts'>\n    {cars.map(({ img, make, type, year, rentalPrice, id, address, description,\n     engineSize, fuelConsumption}) => (\n      <li key={id} className='cart'>\n        <div className='image'>\n        <img className='image_car' src={img} alt='car'/>\n        </div>\n        <p className='type_car'>\n          {make}{type}{year}{rentalPrice}\n        </p>\n        <p className='address_car'>\n        {address}{description}{engineSize}{fuelConsumption}\n        </p>\n        <button className='btn' type=\"button\">\n        Learn more\n        </button>\n      </li>\n    ))}\n  </ul>\n  </section>\n  );\n};\n\n// MovieList.propTypes = {\n//     movies: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         id: PropTypes.number.isRequired,\n//         original_title: PropTypes.string,\n//       })\n//     ).isRequired,\n//   };\n\nexport default CarsList;","import './styles.css';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { useEffect} from 'react';\n// import { addCar } from '../../Redux/carsFetch';\n// import { getVisibleCars } from '../../Redux/selectors';\n// import { Loader } from 'components/Loader/Loader';\n// import useCars from '../hooks/useCars';\n// import CarsList from '../CarsList/CarsList'\nimport CarsList from '../CarsList/CarsList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCars } from '../../Redux/carsFetch';\nimport { useEffect } from 'react';\nimport { getIsLoading, getError} from '../../Redux/selectors';\nimport { getFilter } from '../../Redux/selectors';\nimport { setStatusFilter } from '../../Redux/filtersSlice';\n\nfunction Catalog () {\n    const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n      dispatch(fetchCars());\n    }, [dispatch]);\n    \n\n    // const handleSubmit = e => {\n    //     e.preventDefault();\n    //     const form = e.target;\n    //     const make = form.elements.make.value;\n    //     const rentalPrice = form.elements.number.value;\n    //     const mileage = form.elements.mileage.value;\n    //     const km = form.elements.km.value;\n    //     dispatch(addCar({ make, rentalPrice, mileage, km}));\n    //     form.reset();\n    //   };\n    \n    //   const addContactFind = ({ name, phone }) => {\n    //     if (\n    //       contacts.find(\n    //         item =>\n    //           item.name.toLowerCase() === name.toLowerCase() || item.phone === phone\n    //       )\n    //     ) {\n    //     //   return Notiflix.Notify.info(`${name} or ${phone} is already in contacts`);\n    //     }\n    \n    //     dispatch(addCar({ name, phone }));\n    //   };\n\n    return (\n        <div className=\"container\">\n          <form  \n          className=\"container_search\" \n        //   onSubmit={handleSubmit}\n       \n          >\n            <div className=\"cont_label_one\">\n            \n              <label className=\"lb_input\">\n                Car brand\n                <input\n                  type='text'\n                  value={filter}\n                //   value={cars.make}\n                //   name='make'\n                onChange={e => dispatch(setStatusFilter(e.currentTarget.value))}\n                  placeholder=\"Enter the text\"\n                  className=\"input_one\"\n                />\n              </label>\n            </div>\n            <div className=\"cont_label_two\">\n              <label className=\"lb_input\">\n                Price/ 1 hour\n                <input \n                type='text' \n                value={filter}\n                onChange={e => dispatch(setStatusFilter(e.currentTarget.value))}\n                // value={cars.rentalPrice} \n                // name='rentalPrice'\n                placeholder=\"To $\" \n                className=\"input_two\" />\n              </label>\n            </div>\n            <div className=\"cont_label_three \">\n              <label className=\"lb_input\">\n                Ð¡ar mileage / km\n                <div className=\"cont_input\">\n                  <input \n                  type='test' \n                  placeholder=\"From\" \n                  value={filter}\n                  onChange={e => dispatch(setStatusFilter(e.currentTarget.value))}\n                //   value={cars.mileage}\n                //   name='mileage'\n                  className=\"input_three\" />\n                  <input \n                //   value={cars.km}\n                value={filter}\n                onChange={e => dispatch(setStatusFilter(e.currentTarget.value))}\n                //   name='km'\n                  type='test' \n                  placeholder=\"To\" \n                  className=\"imput-four\" />\n                </div>\n              </label>\n            </div>\n            <button type=\"submit\" className=\"btn\">\n              Search\n            </button>\n            </form>\n            <CarsList />\n            {isLoading && <div>Loading...</div>}\n            {error && <div>{error}</div>}\n          </div>\n      );\n}\n\nexport default Catalog;"],"names":["getFilter","state","filter","getIsLoading","cars","isLoading","getError","error","getVisibleCars","items","name","toLowerCase","includes","useSelector","className","map","img","make","type","year","rentalPrice","id","address","description","engineSize","fuelConsumption","src","alt","dispatch","useDispatch","useEffect","fetchCars","value","onChange","e","setStatusFilter","currentTarget","placeholder"],"sourceRoot":""}